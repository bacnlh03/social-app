package app.createProfileimport cafe.adriel.voyager.core.model.StateScreenModelimport cafe.adriel.voyager.core.model.screenModelScopeimport features.auth.domain.useCases.GetCurrentUidUseCaseimport features.profile.domain.model.ProfileModelimport features.profile.domain.useCases.CreateProfileUseCaseimport kotlinx.coroutines.flow.updateimport kotlinx.coroutines.launchclass CreateProfileScreenModel(	private val getCurrentUidUseCase: GetCurrentUidUseCase,	private val createProfileUseCase: CreateProfileUseCase) : StateScreenModel<CreateProfileState>(CreateProfileState()) {	fun updateAvatar(value: String) {		screenModelScope.launch {			mutableState.update {				it.copy(avatarUrl = value)			}		}	}	fun updateUsername(value: String) {		screenModelScope.launch {			mutableState.update {				it.copy(username = value)			}		}	}	fun updateGender(value: Gender) {		screenModelScope.launch {			mutableState.update {				it.copy(gender = value)			}		}	}	fun updatePhone(value: String) {		screenModelScope.launch {			mutableState.update {				it.copy(phoneNumber = value)			}		}	}	fun createProfile() {		screenModelScope.launch {			mutableState.update {				it.copy(					isLoading = true,					errorMessage = null				)			}			try {				val uid = getCurrentUidUseCase()				val profile = ProfileModel(					uid = uid,					avatarUrl = state.value.avatarUrl,					username = state.value.username,					gender = state.value.gender.toString().lowercase(),					phoneNumber = state.value.phoneNumber				)				createProfileUseCase(profile)				mutableState.update {					it.copy(						isLoading = false,						isSuccess = true					)				}			} catch (e: Exception) {				mutableState.update {					it.copy(						isLoading = false,						isSuccess = false,						errorMessage = e.message					)				}				e.printStackTrace()			}		}	}}