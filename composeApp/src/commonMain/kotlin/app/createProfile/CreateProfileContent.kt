package app.createProfileimport androidx.compose.foundation.Imageimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.clickableimport androidx.compose.foundation.isSystemInDarkThemeimport androidx.compose.foundation.layout.Arrangementimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.foundation.rememberScrollStateimport androidx.compose.foundation.selection.selectableimport androidx.compose.foundation.shape.CircleShapeimport androidx.compose.foundation.verticalScrollimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.Addimport androidx.compose.material3.Iconimport androidx.compose.material3.MaterialThemeimport androidx.compose.material3.RadioButtonimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.runtime.LaunchedEffectimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.clipimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.layout.ContentScaleimport androidx.compose.ui.text.input.KeyboardTypeimport androidx.compose.ui.unit.dpimport app.components.CustomButtonimport app.components.CustomTextFieldimport app.utils.resources.getDrawableimport app.utils.theme.ExtraLargeSpacingimport app.utils.theme.LargeSpacingimport app.utils.theme.MediumSpacingimport org.jetbrains.compose.resources.ExperimentalResourceApiimport org.jetbrains.compose.resources.painterResource@OptIn(ExperimentalResourceApi::class)@Composablefun CreateProfileContent(	modifier: Modifier = Modifier,	state: CreateProfileState,	onAvatarChange: (String) -> Unit,	onUsernameChange: (String) -> Unit,	onGenderChange: (Gender) -> Unit,	onPhoneChange: (String) -> Unit,	onSubmitClick: () -> Unit,	onNavigateToHome: () -> Unit) {	if (state.isSuccess) {		LaunchedEffect(true) {			onNavigateToHome()		}	}	Column(		modifier = modifier			.fillMaxSize()			.verticalScroll(rememberScrollState())			.background(				color = if (isSystemInDarkTheme()) {					MaterialTheme.colorScheme.background				} else {					MaterialTheme.colorScheme.surface				}			)			.padding(				top = ExtraLargeSpacing + LargeSpacing,				start = LargeSpacing + MediumSpacing,				end = LargeSpacing + MediumSpacing,				bottom = LargeSpacing			),		horizontalAlignment = Alignment.CenterHorizontally,		verticalArrangement = Arrangement.spacedBy(MediumSpacing)	) {		Box(			modifier = modifier,			contentAlignment = Alignment.BottomEnd		) {			Image(				painter = painterResource(getDrawable("ic_avatar")),				contentDescription = null,				contentScale = ContentScale.Crop,				modifier = modifier					.size(72.dp)					.clip(CircleShape)					.background(Color.White)			)			Icon(				modifier = modifier.clickable {					onAvatarChange("")				},				imageVector = Icons.Default.Add,				contentDescription = null			)		}		Spacer(modifier.height(ExtraLargeSpacing))		CustomTextField(			modifier = modifier,			value = state.username,			onValueChange = onUsernameChange,			hintText = "Username"		)		val genders = listOf(Gender.Female, Gender.Male)		Row(			modifier = modifier.fillMaxWidth(),			verticalAlignment = Alignment.CenterVertically		) {			genders.forEach { gender ->				Row(					modifier = modifier						.selectable(							selected = (state.gender == gender),							onClick = {								onGenderChange(gender)							}						),					verticalAlignment = Alignment.CenterVertically				) {					RadioButton(						selected = state.gender == gender,						onClick = {							onGenderChange(gender)						}					)					Text(text = gender.toString())				}			}		}		CustomTextField(			modifier = modifier,			value = state.phoneNumber ?: "",			onValueChange = onPhoneChange,			keyboardType = KeyboardType.Phone,			hintText = "Phone number (Optional)"		)		Spacer(modifier.height(MediumSpacing))		CustomButton(			modifier = modifier,			text = "Submit",			onClick = onSubmitClick,			enabled = !state.isLoading		)	}}