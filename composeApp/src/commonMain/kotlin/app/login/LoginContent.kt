package app.loginimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.isSystemInDarkThemeimport androidx.compose.foundation.layout.Arrangementimport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.rememberScrollStateimport androidx.compose.foundation.verticalScrollimport androidx.compose.material3.MaterialThemeimport androidx.compose.material3.Scaffoldimport androidx.compose.material3.SnackbarDurationimport androidx.compose.material3.SnackbarHostimport androidx.compose.material3.SnackbarHostStateimport androidx.compose.runtime.Composableimport androidx.compose.runtime.LaunchedEffectimport androidx.compose.ui.Alignmentimport androidx.compose.ui.ExperimentalComposeUiApiimport androidx.compose.ui.Modifierimport androidx.compose.ui.platform.LocalSoftwareKeyboardControllerimport androidx.compose.ui.text.input.KeyboardTypeimport app.components.CustomButtonimport app.components.CustomTextFieldimport app.login.components.GoToRegisterimport app.utils.theme.ButtonHeightimport app.utils.theme.ExtraLargeSpacingimport app.utils.theme.LargeSpacingimport app.utils.theme.MediumSpacing@OptIn(ExperimentalComposeUiApi::class)@Composablefun LoginContent(	modifier: Modifier = Modifier,	snackbarHostState: SnackbarHostState,	state: LoginState,	onEmailChange: (String) -> Unit,	onPasswordChange: (String) -> Unit,	onLoginClick: () -> Unit,	onNavigateToRegister: () -> Unit,	onNavigateToHome: () -> Unit) {	val keyboardController = LocalSoftwareKeyboardController.current	if (state.authError != null) {		LaunchedEffect(true) {			snackbarHostState.currentSnackbarData?.dismiss()			snackbarHostState.showSnackbar(				message = state.authError,				duration = SnackbarDuration.Short			)		}	}	if (state.isSuccess) {		LaunchedEffect(true) {			onNavigateToHome()		}	}	Scaffold(		snackbarHost = {			SnackbarHost(hostState = snackbarHostState)		}	) {		Column(			modifier = modifier				.fillMaxSize()				.verticalScroll(rememberScrollState())				.background(					color = if (isSystemInDarkTheme()) {						MaterialTheme.colorScheme.background					} else {						MaterialTheme.colorScheme.surface					}				)				.padding(					top = ExtraLargeSpacing + LargeSpacing,					start = LargeSpacing + MediumSpacing,					end = LargeSpacing + MediumSpacing,					bottom = LargeSpacing				),			horizontalAlignment = Alignment.CenterHorizontally,			verticalArrangement = Arrangement.spacedBy(MediumSpacing)		) {			CustomTextField(				value = state.email,				onValueChange = onEmailChange,				hintText = "Email",				keyboardType = KeyboardType.Email,				errorMessage = state.emailError			)			CustomTextField(				value = state.password,				onValueChange = onPasswordChange,				hintText = "Password",				keyboardType = KeyboardType.Password,				isPasswordTextField = true,				errorMessage = state.passwordError			)			CustomButton(				modifier = modifier					.fillMaxWidth()					.height(ButtonHeight),				text = "Sign In",				onClick = {					keyboardController?.hide()					onLoginClick()				},				enabled = !state.isLoading			)			GoToRegister(				modifier = modifier,				enable = !state.isLoading,				onNavigateToRegister = onNavigateToRegister			)		}	}}