package app.componentsimport androidx.compose.foundation.isSystemInDarkThemeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.text.KeyboardOptionsimport androidx.compose.material3.Iconimport androidx.compose.material3.IconButtonimport androidx.compose.material3.MaterialThemeimport androidx.compose.material3.Textimport androidx.compose.material3.TextFieldimport androidx.compose.material3.TextFieldDefaultsimport androidx.compose.runtime.Composableimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.runtime.setValueimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.graphics.Color.Companion.Grayimport androidx.compose.ui.text.input.KeyboardTypeimport androidx.compose.ui.text.input.PasswordVisualTransformationimport androidx.compose.ui.text.input.VisualTransformationimport app.utils.resources.getDrawableimport org.jetbrains.compose.resources.ExperimentalResourceApiimport org.jetbrains.compose.resources.painterResource@Composablefun CustomTextField(	modifier: Modifier = Modifier,	value: String,	onValueChange: (String) -> Unit,	keyboardType: KeyboardType = KeyboardType.Text,	isPasswordTextField: Boolean = false,	isSingleLine: Boolean = true,	hintText: String,	errorMessage: String? = null) {	var isPasswordVisible by remember {		mutableStateOf(false)	}	TextField(		value = value,		onValueChange = onValueChange,		modifier = modifier.fillMaxWidth(),		textStyle = MaterialTheme.typography.bodyMedium,		keyboardOptions = KeyboardOptions.Default.copy(			keyboardType = keyboardType		),		singleLine = isSingleLine,		colors = TextFieldDefaults.colors(			focusedContainerColor = if (isSystemInDarkTheme()) {				MaterialTheme.colorScheme.surface			} else {				Gray			},			unfocusedContainerColor = if (isSystemInDarkTheme()) {				MaterialTheme.colorScheme.surface			} else {				Gray			},			unfocusedIndicatorColor = Color.Transparent,			focusedIndicatorColor = Color.Transparent		),		trailingIcon = if (isPasswordTextField) {			{				PasswordEyeIcon(isPasswordVisible = isPasswordVisible) {					isPasswordVisible = !isPasswordVisible				}			}		} else {			null		},		visualTransformation = if (isPasswordTextField) {			if (isPasswordVisible) {				VisualTransformation.None			} else {				PasswordVisualTransformation()			}		} else {			VisualTransformation.None		},		placeholder = {			Text(text = hintText, style = MaterialTheme.typography.bodyMedium)		},		shape = MaterialTheme.shapes.medium,		isError = errorMessage != null,		supportingText = if (errorMessage != null) {			{				Text(					text = errorMessage,					color = MaterialTheme.colorScheme.error				)			}		} else {			null		}	)}@OptIn(ExperimentalResourceApi::class)@Composableprivate fun PasswordEyeIcon(	isPasswordVisible: Boolean,	onPasswordVisibilityToggle: () -> Unit) {	val image = if (isPasswordVisible) {		painterResource(getDrawable("ic_show_eye"))	} else {		painterResource(getDrawable("ic_hide_eye"))	}	IconButton(onClick = onPasswordVisibilityToggle) {		Icon(painter = image, contentDescription = null)	}}