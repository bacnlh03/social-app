package app.registerimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.isSystemInDarkThemeimport androidx.compose.foundation.layout.Arrangementimport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.rememberScrollStateimport androidx.compose.foundation.verticalScrollimport androidx.compose.material3.MaterialThemeimport androidx.compose.material3.Scaffoldimport androidx.compose.material3.SnackbarDurationimport androidx.compose.material3.SnackbarHostimport androidx.compose.material3.SnackbarHostStateimport androidx.compose.runtime.Composableimport androidx.compose.runtime.LaunchedEffectimport androidx.compose.ui.Alignmentimport androidx.compose.ui.ExperimentalComposeUiApiimport androidx.compose.ui.Modifierimport androidx.compose.ui.platform.LocalSoftwareKeyboardControllerimport androidx.compose.ui.text.input.KeyboardTypeimport app.components.CustomButtonimport app.components.CustomTextFieldimport app.register.components.GoToLoginimport app.utils.theme.ButtonHeightimport app.utils.theme.ExtraLargeSpacingimport app.utils.theme.LargeSpacingimport app.utils.theme.MediumSpacing@OptIn(ExperimentalComposeUiApi::class)@Composablefun RegisterContent(	modifier: Modifier = Modifier,	snackbarHostState: SnackbarHostState,	state: RegisterState,	onEmailChange: (String) -> Unit,	onPasswordChange: (String) -> Unit,	onConfirmPasswordChange: (String) -> Unit,	onRegisterClick: () -> Unit,	onNavigateToLogin: () -> Unit,	onNavigateToCreateProfile: () -> Unit) {	val keyboardController = LocalSoftwareKeyboardController.current	if (state.authError != null) {		LaunchedEffect(true) {			snackbarHostState.currentSnackbarData?.dismiss()			snackbarHostState.showSnackbar(				message = state.authError,				duration = SnackbarDuration.Short			)		}	}	if (state.isSuccess) {		LaunchedEffect(true) {			onNavigateToCreateProfile()		}	}	Scaffold(		snackbarHost = {			SnackbarHost(hostState = snackbarHostState)		}	) {		Column(			modifier = modifier				.fillMaxSize()				.verticalScroll(rememberScrollState())				.background(					color = if (isSystemInDarkTheme()) {						MaterialTheme.colorScheme.background					} else {						MaterialTheme.colorScheme.surface					}				)				.padding(					top = ExtraLargeSpacing + LargeSpacing,					start = LargeSpacing + MediumSpacing,					end = LargeSpacing + MediumSpacing,					bottom = LargeSpacing				),			horizontalAlignment = Alignment.CenterHorizontally,			verticalArrangement = Arrangement.spacedBy(MediumSpacing)		) {			CustomTextField(				value = state.email,				onValueChange = onEmailChange,				hintText = "Email",				keyboardType = KeyboardType.Email,				errorMessage = state.emailError			)			CustomTextField(				value = state.password,				onValueChange = onPasswordChange,				hintText = "Password",				keyboardType = KeyboardType.Password,				isPasswordTextField = true,				errorMessage = state.passwordError			)			CustomTextField(				value = state.confirmPassword,				onValueChange = onConfirmPasswordChange,				hintText = "Confirm password",				keyboardType = KeyboardType.Password,				isPasswordTextField = true,				errorMessage = state.confirmPasswordError			)			CustomButton(				modifier = modifier					.fillMaxWidth()					.height(ButtonHeight),				text = "Sign In",				onClick = {					keyboardController?.hide()					onRegisterClick()				},				enabled = !state.isLoading			)			GoToLogin(				modifier = modifier,				enable = !state.isLoading,				onNavigateToLogin = onNavigateToLogin			)		}	}}